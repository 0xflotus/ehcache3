/*
 * Copyright Terracotta, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id 'java'
  id 'maven'
  id 'osgi'
  id 'com.github.johnrengelman.shadow' version '1.2.2'
}

def shadowBaseName = 'ehcache'


def projectNamesToInclude = [':api', ':core', ':impl', ':management', ':107', ':xml', ':transactions']
def projectsToInclude = projectNamesToInclude.collect {project(it)}
def buildDir = project.getBuildDir().getPath()
def OSGI_OVERRIDE_KEYS = ['Import-Package', 'Export-Package', 'Tool', 'Bnd-LastModified', 'Created-By']

configurations {
    shadowProvided
}

dependencies {
  projectsToInclude.each {compile it}
  shadow 'org.slf4j:slf4j-api:1.7.7', "org.terracotta:offheap-store:$parent.offHeapVersion"
  shadowProvided 'javax.transaction:jta:1.1', 'org.codehaus.btm:btm:2.1.4', 'org.terracotta:management-model:0.1.0'
}

// Skip a number of defaults for this aggregation project
jar.onlyIf { false }
sourceJar.onlyIf { false }
javadoc.onlyIf { false }
javadocJar.onlyIf { false }

configurations.archives.artifacts.with { archives ->
  archives.removeAll {
    it.name == 'ehcache-dist'
  }
}

shadowJar {
  baseName = "$shadowBaseName-shadow"
  classifier = ''
  projectNamesToInclude.each {projName -> dependencies {include(project(projName))}}
  dependencies {
    include(dependency('org.terracotta:statistics:1.1.0'))
  }

  mergeServiceFiles()
}

task unzipShadowJarClasses(type: Copy, dependsOn: 'shadowJar') {
  from(project.zipTree(project.shadowJar.archivePath.getPath())) {
    include("**/*.class")
  }
  into("$buildDir/tmp/osgiShadowJar-classes")
}

task osgiShadowJar(type: Jar, dependsOn: 'unzipShadowJarClasses') {
  baseName = shadowBaseName
  def osgiConvention = project.convention.getPlugin(OsgiPluginConvention.class)
  def osgiManifest = osgiConvention.osgiManifest {
    // Metadata
    instructionReplace 'Bundle-Name', 'Ehcache 3'
    instructionReplace 'Bundle-SymbolicName', "org.ehcache.$shadowBaseName"
    instruction 'Bundle-Description', 'Ehcache is an open-source caching library, compliant with the JSR-107 standard.'
    instruction 'Bundle-DocURL', 'http://ehcache.org'
    instruction 'Bundle-License', 'LICENSE'
    instruction 'Bundle-Vendor', 'Terracotta Inc., a wholly-owned subsidiary of Software AG USA, Inc.'
    instruction 'Bundle-RequiredExecutionEnvironment', 'JavaSE-1.6'

    // Optional packages
    instruction 'Import-Package', 'bitronix.tm.*;resolution:=optional', 'javax.cache.*;resolution:=optional',
            'javax.transaction.*;resolution:=optional', 'org.terracotta.offheapstore.*;resolution:=optional',
            'org.terracotta.management.*;resolution:=optional'
    // Ignored packages
    instruction 'Import-Package', '!sun.misc', '!sun.security.action', '*'
    classesDir = new File("$buildDir/tmp/osgiShadowJar-classes")
    classpath = project.configurations.shadow + project.configurations.shadowProvided
  }

  manifest = new com.github.jengelman.gradle.plugins.shadow.tasks.DefaultInheritManifest(getServices().get(org.gradle.api.internal.file.FileResolver.class))

  manifest.inheritFrom project.shadowJar.manifest

  fillManifest(manifest, shadowBaseName)

  manifest.inheritFrom(osgiManifest) {
    eachEntry {
      if (it.getKey().startsWith('Bundle') || OSGI_OVERRIDE_KEYS.contains(it.getKey())) {
        it.setValue(it.getMergeValue())
      } else {
        it.setValue(it.getBaseValue())
      }
    }
  }

  from(project.zipTree(project.shadowJar.archivePath.getPath())) {
    exclude("META-INF/MANIFEST.MF")
  }

}

task shadowSourceJar(type: Jar, dependsOn: shadowJar) {
  baseName = shadowBaseName
  classifier = 'sources'

  projectsToInclude.each {from it.sourceSets.main.allSource}
}

task aggregateJavadoc(type: Javadoc) {
  title "$shadowBaseName $version API"
  dependsOn projectsToInclude.javadoc
  source projectsToInclude.javadoc.source
  destinationDir file("$buildDir/docs/javadoc")
  classpath = files(projectsToInclude.javadoc.classpath)
}

task shadowJavadocJar(type: Jar) {
  dependsOn shadowJar, aggregateJavadoc
  baseName = shadowBaseName
  classifier = 'javadoc'

  from aggregateJavadoc.destinationDir
}

task asciidocZip(type: Zip, dependsOn: ':docs:asciidoctor') {
  baseName = shadowBaseName
  classifier = 'docs'

  from '../docs/build/asciidoc/html5'
}

artifacts {
  archives osgiShadowJar
  archives shadowSourceJar
  archives shadowJavadocJar
  archives asciidocZip
}

def artifactFiltering = {
  addFilter('shadow') {artifact, file ->
    artifact.name == shadowBaseName
  }

  def shadowPom = pom('shadow')
  shadowPom.groupId = 'org.ehcache'
  shadowPom.artifactId = shadowBaseName
  shadowPom.scopeMappings.mappings.remove(project.configurations.compile)
  shadowPom.scopeMappings.mappings.remove(project.configurations.runtime)
  shadowPom.scopeMappings.mappings.remove(project.configurations.testCompile)
  shadowPom.scopeMappings.mappings.remove(project.configurations.testRuntime)
  shadowPom.scopeMappings.addMapping(MavenPlugin.COMPILE_PRIORITY, project.configurations.shadow, Conf2ScopeMappingContainer.COMPILE)
  shadowPom.scopeMappings.addMapping(MavenPlugin.COMPILE_PRIORITY, project.configurations.shadowProvided, Conf2ScopeMappingContainer.PROVIDED)
  pomFiller(shadowPom, 'Ehcache', 'Ehcache single jar, containing all modules')
}

install {
  repositories.mavenInstaller artifactFiltering
}

uploadArchives {
  repositories {
    mavenDeployer ({
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment)}

      if (isReleaseVersion) {
        repository(id: 'sonatype-nexus-staging', url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
          authentication(userName: sonatypeUser, password: sonatypePwd)
        }
      } else {
        repository(id: 'sonatype-nexus-snapshot', url: 'https://oss.sonatype.org/content/repositories/snapshots') {
          authentication(userName: sonatypeUser, password: sonatypePwd)
        }
      }
    } << artifactFiltering)
  }
}

