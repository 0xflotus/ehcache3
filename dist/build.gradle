/*
 * Copyright Terracotta, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id 'java'
  id 'maven'
  id 'signing'
  id 'osgi'
  id 'com.github.johnrengelman.shadow' version '1.2.2'
}

group = 'org.ehcache'
archivesBaseName = 'ehcache'

def OSGI_OVERRIDE_KEYS = ['Import-Package', 'Export-Package', 'Private-Package', 'Tool', 'Bnd-LastModified', 'Created-By', 'Require-Capability']

configurations {
    shadowProvided
}

dependencies {
  compile project(':api')
  compile project(':core')
  compile project(':impl')
  compile project(':management')
  compile project(':107')
  compile project(':xml')
  compile project(':transactions')
  
  shadow "org.slf4j:slf4j-api:$parent.slf4jVersion"
  shadowProvided 'javax.transaction:jta:1.1', 'org.codehaus.btm:btm:2.1.4'
}

shadowJar {
  baseName = "$archivesBaseName-shadow"
  classifier = ''
  dependencies {
    exclude({ rdep -> !['org.ehcache', 'org.terracotta'].any({ prefix -> rdep.moduleGroup.startsWith(prefix) })})
  }
  mergeServiceFiles()
}

task unzipShadowJarClasses(type: Copy, dependsOn: 'shadowJar') {
  from(project.zipTree(project.shadowJar.archivePath.getPath())) {
    include("**/*.class")
  }
  into(new File(buildDir, "/tmp/osgiShadowJar-classes"))
}

jar {
  dependsOn unzipShadowJarClasses
  
  def osgiConvention = project.convention.getPlugin(OsgiPluginConvention.class)
  def osgiManifest = osgiConvention.osgiManifest {
    // Metadata
    instructionReplace 'Bundle-Name', 'Ehcache 3'
    instructionReplace 'Bundle-SymbolicName', "org.ehcache.$archivesBaseName"
    instruction 'Bundle-Description', 'Ehcache is an open-source caching library, compliant with the JSR-107 standard.'
    instruction 'Bundle-DocURL', 'http://ehcache.org'
    instruction 'Bundle-License', 'LICENSE'
    instruction 'Bundle-Vendor', 'Terracotta Inc., a wholly-owned subsidiary of Software AG USA, Inc.'
    instruction 'Bundle-RequiredExecutionEnvironment', 'JavaSE-1.6'

    configurations.compile.dependencies.withType(ProjectDependency).dependencyProject.findAll({p -> p.ext.properties.osgi}).each{ prop ->
      new groovy.json.JsonSlurper().parseText(prop.ext.properties.osgi).each {
        instruction(it.key, *it.value)
      }
    }
    
    instruction 'Export-Package', '*'

    // Ignored packages
    instruction 'Import-Package', '!sun.misc', '!sun.security.action', '!com.sun.jmx.mbeanserver', '*'
    classesDir = unzipShadowJarClasses.destinationDir
    classpath = files(configurations.shadow, project.configurations.shadowProvided)
  }

  manifest = new com.github.jengelman.gradle.plugins.shadow.tasks.DefaultInheritManifest(getServices().get(org.gradle.api.internal.file.FileResolver.class))

  manifest.inheritFrom shadowJar.manifest

  utils.fillManifest(manifest, archivesBaseName)

  manifest.inheritFrom(osgiManifest) {
    eachEntry {
      if (it.getKey().startsWith('Bundle') || OSGI_OVERRIDE_KEYS.contains(it.getKey())) {
        it.setValue(it.getMergeValue())
      } else {
        it.setValue(it.getBaseValue())
      }
    }
  }

  from(project.zipTree(project.shadowJar.archivePath.getPath())) {
    exclude("META-INF/MANIFEST.MF")
  }

}

sourceJar {
  from configurations.compile.allDependencies.withType(ProjectDependency).dependencyProject.flatten {
    it.sourceSets.main.allSource
  }
}

javadoc {
  def componentProjects = configurations.compile.dependencies.withType(ProjectDependency).dependencyProject
  dependsOn componentProjects.javadoc
  title "$archivesBaseName $version API"
  source componentProjects.javadoc.source
  classpath = files(componentProjects.javadoc.classpath)
}

task asciidocZip(type: Zip, dependsOn: ':docs:asciidoctor') {
  classifier = 'docs'
  from tasks.getByPath(':docs:asciidoctor').outputDir
}

artifacts {
  archives asciidocZip
}

signing {
  required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives")}
  sign configurations.archives
}

def artifactFiltering = {
  pom.scopeMappings.mappings.remove(project.configurations.compile)
  pom.scopeMappings.mappings.remove(project.configurations.runtime)
  pom.scopeMappings.mappings.remove(project.configurations.testCompile)
  pom.scopeMappings.mappings.remove(project.configurations.testRuntime)
  pom.scopeMappings.addMapping(MavenPlugin.COMPILE_PRIORITY, project.configurations.shadow, Conf2ScopeMappingContainer.COMPILE)
  pom.scopeMappings.addMapping(MavenPlugin.COMPILE_PRIORITY, project.configurations.shadowProvided, Conf2ScopeMappingContainer.PROVIDED)
  utils.pomFiller(pom, 'Ehcache', 'Ehcache single jar, containing all modules')
}

install {
  repositories.mavenInstaller artifactFiltering
}

uploadArchives {
  repositories {
    mavenDeployer ({
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment)}

      if (isReleaseVersion) {
        repository(id: 'sonatype-nexus-staging', url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
          authentication(userName: sonatypeUser, password: sonatypePwd)
        }
      } else {
        repository(id: 'sonatype-nexus-snapshot', url: 'https://oss.sonatype.org/content/repositories/snapshots') {
          authentication(userName: sonatypeUser, password: sonatypePwd)
        }
      }
    } << artifactFiltering)
  }
}
