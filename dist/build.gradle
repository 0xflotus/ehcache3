/*
 * Copyright Terracotta, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  repositories { jcenter() }
  dependencies {
    classpath 'com.github.jengelman.gradle.plugins:shadow:1.1.1'
  }
}

apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'maven'

dependencies {
  compile project(':api'), project(':core'), project(':impl'), project(':jmx'), project(':107'), project(':xml')
  shadow 'org.slf4j:slf4j-api:1.7.7'
}

shadowJar {
  baseName = 'ehcache'
  classifier = ''
  dependencies {
    include(project(':107'))
    include(project(':api'))
    include(project(':core'))
    include(project(':impl'))
    include(project(':jmx'))
    include(project(':xml'))
    exclude(dependency('org.slf4j:slf4j-api'))
  }
  manifest.attributes(
          'provider': 'gradle',
          'Implementation-Title': 'ehcache',
          'Implementation-Version': project.version,
          'Built-By': System.getProperty('user.name'),
          'Built-JDK': System.getProperty('java.version'),
          'Build-Time': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
  )
  mergeServiceFiles()
}

artifacts {
  archives shadowJar
}

def artifactFiltering = {
  addFilter('shadow') {artifact, file ->
    artifact.name == 'ehcache'
  }

  def shadowPom = pom('shadow')
  shadowPom.groupId = 'org.ehcache'
  shadowPom.artifactId = 'ehcache'
  shadowPom.scopeMappings.mappings.remove(project.configurations.compile)
  shadowPom.scopeMappings.mappings.remove(project.configurations.runtime)
  shadowPom.scopeMappings.mappings.remove(project.configurations.testCompile)
  shadowPom.scopeMappings.addMapping(MavenPlugin.RUNTIME_PRIORITY, project.configurations.shadow, Conf2ScopeMappingContainer.RUNTIME)
  pomFiller(shadowPom, 'Ehcache', 'Ehcache default jar, containing all modules')
}

install {
  repositories.mavenInstaller artifactFiltering
}

uploadArchives {
  repositories {
    mavenDeployer ({
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment)}

      if (isReleaseVersion) {
        repository(id: 'sonatype-nexus-staging', url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
          authentication(userName: sonatypeUser, password: sonatypePwd)
        }
      } else {
        repository(id: 'sonatype-nexus-snapshot', url: 'https://oss.sonatype.org/content/repositories/snapshots') {
          authentication(userName: sonatypeUser, password: sonatypePwd)
        }
      }
    } << artifactFiltering)
  }
}

