= Meet up notes

:toc:

== Oct 16, 2014 - Hangout on Air

Next public meeting on https://plus.google.com/u/0/events/cljv4s8a52pqo36bh8r2afaiu1s[G+ Hangout on Air] at 11:30pm IST / 8pm CET / 2pm EST / 11am PST

=== Agenda

 * tbd

== Oct 9, 2014 - Hangout on Air

Recording available https://www.youtube.com/watch?v=P_P641-hkPs&list=UU43PVCp2j0b2og2DtxNOU1A[here on YouTube]

=== Agenda

 * +EhcacheManager+ & +Ehcache+ implicit contract nailed ?
 * Lifecycle and state transitions

== Oct 2, 2014 - Hangout on Air

Recording available https://www.youtube.com/watch?v=YgfsRhQPT7k&list=UU43PVCp2j0b2og2DtxNOU1A[here on YouTube]

=== Agenda

 * Project structure and especially the spi-tester sources
 * What should a +Cache+ if everything gets veto'ed from being evicted?
 * +CacheLoader+ & +CacheWriter+ only for implementing the Cache Through pattern?
 ** Some background https://www.youtube.com/watch?v=a8LzwqZNfYE&list=UU43PVCp2j0b2og2DtxNOU1A[here in this previous meeting]
 * Mocking time in tests

== Sep 25, 2014 - Hangout on Air

Recording available https://www.youtube.com/watch?v=KaOagtwTHyw&index=2&list=UU43PVCp2j0b2og2DtxNOU1A[here on YouTube]

=== Agenda (sorry, hadn't had time to review it yet)

 * Release https://github.com/ehcache/ehcache3/milestones[milestones]:
 ** 107 Alpha
 ** OSS Beta
 * Recap on SPI Testing
 * +CacheLoader+ & +CacheWriter+ lifecycle in +StandaloneCache+ vs. managed ones
 * more TBD on the https://groups.google.com/forum/#!forum/ehcache-dev[Ehcache Developer Google Group]

== Sep 18, 2014 - Hangout on Air

Recording available https://www.youtube.com/watch?v=51PLWgRRLaE&list=UU43PVCp2j0b2og2DtxNOU1A[here on YouTube]

=== Moved to Cloudbees

Our build infrastructure is now on Cloudbees here:
https://ehcache.ci.cloudbees.com

Still need to publish +-SNAPSHOT+ to Sonatype though

=== Git workflow

We said we should not +git push --force+ to a branch that's currently under review (because of the PR associated); but rather closing the PR and creating a new one.

WARNING: This decision has been invalidated since: it's okay to do it, but be vocal about it. One case where you just want to do it, is rebasing your branch should some other PR been merged in between.

If you do changes based on the feedback from the PR, they probably should be a commit on their own atop of the other

=== ConcurrentHashMap v8 port

Is ported from jsr-166 cvs (revision information is recorded in the commit). Still uses +Unsafe+, but lets leave it like that for now (won't work on GAE for instance though).

Need to have the CHMv8 tests not run everytime (at least not as they stand).

+JSR166Wrapper+ contains all interfaces to please +javac+

Actually make use of CHMv8 in +OnHeapStore+ is still work that's still pending

Also have a +Unsafe+ wrapper that adds the methods not present in 1.6

=== SPI Testing strategy (discussed https://www.youtube.com/watch?v=51PLWgRRLaE&list=UU43PVCp2j0b2og2DtxNOU1A#t=1503[here])

Hung is currently working on a proposal, based on this here: https://gist.github.com/alexsnaps/f42557d008e2ed37f2b1

Acceptance criteria:

 * Not runtime dependency on a given testing framework (e.g. junit)
 ** but can provide support for testing framework (e.g. to provide nice reporting)
 * SPI tester should report a complete run, not stop on first failure it encounters
 * A given SPI tester doesn't know about any given implementation, but implementations pull the SPI tester in
 * Probably want to make the SPI testers available through maven using some qualifier (e.g. +core:SpiTesters+)
 * The https://jcp.org/aboutJava/communityprocess/ec-public/TCK-docs/tsdg.pdf[Java™ Technology Test Suite
Development Guide 1.2] would probably contain some good input on writing actual SPI tests
 * SPI tests are probably somewhat easier to write, given that we know where and how (UTSL!) a given SPI is actually used

== Sep 11, 2014 - Hangout on Air

Recording available https://www.youtube.com/watch?v=PPiS6Y9Fzh4&list=UU43PVCp2j0b2og2DtxNOU1A[here on YouTube]

=== CRUD operations

 - Let's implement the void ones (e.g. +remove(K): void+) for now, we may do more later. It's a cache, no real reason to wanting the old value ever...

=== Resilience of +Ehcache+

 - Stick to +ResilienceStrategy+ and have +Ehcache+ be resilient:
 * No issues for on-heap +Store+ implementations
 * Persistent ones will cope just fine (i.e. recover)
 * Distributed ones will force some +.dealWithUnconsistentCache()+ cases
 - Have a checked, do it all yourself, interface of some kind
 - Postponing the work until all CRUD operations are implemented

=== Travis CI

 - Lacks archiving, more work for us to do, but that's the work we'd want to be part of the _S_ in CIaaS
 - Louis to take ownership and most probably move to cloudbees...

=== Eclipse & Gradle

 - Hung to check the Gradle plugin
 - Eclipse plugin in gradle build is on master now

== Sep 4, 2014 - Hangout on Air

Recording available https://www.youtube.com/watch?v=iehQ9Wxx204&list=UU43PVCp2j0b2og2DtxNOU1A[here on YouTube]

=== Review some proposal on +CacheManager+ and +Cache+ subtyping & their matching +Builder+

We want +CacheBuilder+ to create instances of types:

 . +Unmanaged(ShortLived)Cache+
 . +UnmanagedLongLivedCache+

While +CacheManagerBuilder+ create:

 . +(ShortLived)CacheManager+
 . +LongLivedCacheManager+

which manages +Cache+, i.e. not +Unmanaged+ ones. +LongLived+ exposes the methods to delete 'persistent' data (i.e. that outlives the life of the JVM). A +Cache+ is closed or destroyed through the +CacheManager+.

=== Initial API issue break down

Issues are now ordered on https://waffle.io/ehcache/ehcache3[waffle.io]:

 . 'API' labeled issues for public API require
 .. JavaDoc
 . 'API' labeled issues that are about SPI, require
 .. JavaDoc
 .. Tester of some kind, that
 . 'Enhancement' labeled issues require
 .. JavaDoc, as required
 .. Unit tests
 .. If ported from the 2.x line, best is to have decent coverage on the responsibilities the class will keep, prior to refactoring it; then refactor and add/tweak tests as required

=== CIaaS

  . drone.io 'failed'
  . codeship.io 'failed'
  . travis-ci.org 'testing...'
  . cloudbees.com 'todo'

== Aug 28, 2014 - Hangout on Air

Recording available https://www.youtube.com/watch?v=_S2cn4nf0_U&list=UU43PVCp2j0b2og2DtxNOU1A[here on YouTube]

=== +CacheManagerBuilder+ and +CacheBuilder+

Let's try to introduce a type hierarchy for both +Cache+ and +CacheManager+ that the builder would actually build, narrowing the type down à la Quartz 2.0 builders.

[source,java]
----
PersistentCache cache = newCacheBuilder() // <1>
  .diskPersistent(
    cfg // <3>
  ) // <2>
  .build(); // <4>
----

<1> static method that creates a builder: +Builder<Cache>+
<2> narrows to the builder's type down to +Builder<PersistentCache>+
<3> +cfg+ actually defines the mode to use for persistence, eg: expect data on disk; expect none; use data if there; wipe data if there; wipe data on +Cache.close()+
<4> actually builds the +PersistentCache+

Alex to make an actual proposal by next week.

=== +CacheManager+-less +Cache+ instances

 - Keep these, where the user is actually responsible to provide services
 - Only these +Cache+'s type would expose +.close()+
 - +CacheManager+ managed +Cache+ instances would be 'closed' through the +CacheManager+
 - To further lifecycle +PersistentCache+ instance, managed by a +CacheManager+, the latter could expose some method to retrieve +DiskPersisted+ (interface with minimal lifecycle methods) instances; e.g.

----
Iterable<Map.Entry<String, DiskPersisted>> it = cacheManager.getManaged(DiskPersisted.class);
it.next().value() // <1>
 .deleteOnDiskFiles(); // <2>
----

<1> +DiskPersisted+ could expose methods around lifecycling the data on disk only. No +Cache+ methods
<2> Implies +Cache.close()+, i.e. clear all 'VM transient' data and delete data from disk.

== Aug 21, 2014 - Hangout on Air

Recording available https://www.youtube.com/watch?v=rUI4SsPRGQ4[here on YouTube]

=== +org.ehcache.Cache+ vs. +org.ehcache.spi.cache.Store+

==== +Cache<K, V>+ backed by a +Store<K, Element<V>>+

 . Rename +Element+
 . Try +Store<K, Element<V>>+ for now

==== Roles

How much can be solved by having the +Cache+ call into some +Store.process(K, EntryProcessor<K, V, T>): T+ equivalent?

 . +Cache+ Roles
 .. Expiry
 .. Public EntryListeners
 .. Cache lifecycle
 .. CacheLoaders
 .. CacheWriters
 . +Store+ Roles
 .. Store by Value vs. Ref.
 .. Eviction & (private) EvictionListeners

=== Other items

==== Integrate 107 TCK

Created issue #21

==== What's with the sizeof modules ?

 . *Hibernate* to be integrated within the h2lc module there
 . *Groovy*, either:
 .. @candrews takes ownership, or
 .. we find someone within TC/SAG to do so (unidentified yet though)
