= Meet up notes

:toc:

== Sep 18, 2014 - Hangout on Air

Next public meeting on https://plus.google.com/u/0/events/cst4usni73q4qkd315qtm8p6rm8[G+ Hangout on Air] at 11:30pm IST / 8pm CET / 2pm EST / 11am PST

=== Agenda

*To be defined*

== Sep 11, 2014 - Hangout on Air

Recording available https://www.youtube.com/watch?v=PPiS6Y9Fzh4&list=UU43PVCp2j0b2og2DtxNOU1A[here on YouTube]

=== CRUD operations

 - Let's implement the void ones (e.g. +remove(K): void+) for now, we may do more later. It's a cache, no real reason to wanting the old value ever...

=== Resilience of +Ehcache+

 - Stick to +ResilienceStrategy+ and have +Ehcache+ be resilient:
 * No issues for on-heap +Store+ implementations
 * Persistent ones will cope just fine (i.e. recover)
 * Distributed ones will force some +.dealWithUnconsistentCache()+ cases
 - Have a checked, do it all yourself, interface of some kind
 - Postponing the work until all CRUD operations are implemented

=== Travis CI

 - Lacks archiving, more work for us to do, but that's the work we'd want to be part of the _S_ in CIaaS
 - Louis to take ownership and most probably move to cloudbees...

=== Eclipse & Gradle

 - Hung to check the Gradle plugin
 - Eclipse plugin in gradle build is on master now

== Sep 4, 2014 - Hangout on Air

Recording available https://www.youtube.com/watch?v=iehQ9Wxx204&list=UU43PVCp2j0b2og2DtxNOU1A[here on YouTube]

=== Review some proposal on +CacheManager+ and +Cache+ subtyping & their matching +Builder+

We want +CacheBuilder+ to create instances of types:

 . +Unmanaged(ShortLived)Cache+
 . +UnmanagedLongLivedCache+

While +CacheManagerBuilder+ create:

 . +(ShortLived)CacheManager+
 . +LongLivedCacheManager+

which manages +Cache+, i.e. not +Unmanaged+ ones. +LongLived+ exposes the methods to delete 'persistent' data (i.e. that outlives the life of the JVM). A +Cache+ is closed or destroyed through the +CacheManager+.

=== Initial API issue break down

Issues are now ordered on https://waffle.io/ehcache/ehcache3[waffle.io]:

 . 'API' labeled issues for public API require
 .. JavaDoc
 . 'API' labeled issues that are about SPI, require
 .. JavaDoc
 .. Tester of some kind, that
 . 'Enhancement' labeled issues require
 .. JavaDoc, as required
 .. Unit tests
 .. If ported from the 2.x line, best is to have decent coverage on the responsibilities the class will keep, prior to refactoring it; then refactor and add/tweak tests as required

=== CIaaS

  . drone.io 'failed'
  . codeship.io 'failed'
  . travis-ci.org 'testing...'
  . cloudbees.com 'todo'

== Aug 28, 2014 - Hangout on Air

Recording available https://www.youtube.com/watch?v=_S2cn4nf0_U&list=UU43PVCp2j0b2og2DtxNOU1A[here on YouTube]

=== +CacheManagerBuilder+ and +CacheBuilder+

Let's try to introduce a type hierarchy for both +Cache+ and +CacheManager+ that the builder would actually build, narrowing the type down Ã  la Quartz 2.0 builders.

[source,java]
----
PersistentCache cache = newCacheBuilder() // <1>
  .diskPersistent(
    cfg // <3>
  ) // <2>
  .build(); // <4>
----

<1> static method that creates a builder: +Builder<Cache>+
<2> narrows to the builder's type down to +Builder<PersistentCache>+
<3> +cfg+ actually defines the mode to use for persistence, eg: expect data on disk; expect none; use data if there; wipe data if there; wipe data on +Cache.close()+
<4> actually builds the +PersistentCache+

Alex to make an actual proposal by next week.

=== +CacheManager+-less +Cache+ instances

 - Keep these, where the user is actually responsible to provide services
 - Only these +Cache+'s type would expose +.close()+
 - +CacheManager+ managed +Cache+ instances would be 'closed' through the +CacheManager+
 - To further lifecycle +PersistentCache+ instance, managed by a +CacheManager+, the latter could expose some method to retrieve +DiskPersisted+ (interface with minimal lifecycle methods) instances; e.g.

----
Iterable<Map.Entry<String, DiskPersisted>> it = cacheManager.getManaged(DiskPersisted.class);
it.next().value() // <1>
 .deleteOnDiskFiles(); // <2>
----

<1> +DiskPersisted+ could expose methods around lifecycling the data on disk only. No +Cache+ methods
<2> Implies +Cache.close()+, i.e. clear all 'VM transient' data and delete data from disk.

== Aug 21, 2014 - Hangout on Air

Recording available https://www.youtube.com/watch?v=rUI4SsPRGQ4[here on YouTube]

=== +org.ehcache.Cache+ vs. +org.ehcache.spi.cache.Store+

==== +Cache<K, V>+ backed by a +Store<K, Element<V>>+

 . Rename +Element+
 . Try +Store<K, Element<V>>+ for now

==== Roles

How much can be solved by having the +Cache+ call into some +Store.process(K, EntryProcessor<K, V, T>): T+ equivalent?

 . +Cache+ Roles
 .. Expiry
 .. Public EntryListeners
 .. Cache lifecycle
 .. CacheLoaders
 .. CacheWriters
 . +Store+ Roles
 .. Store by Value vs. Ref.
 .. Eviction & (private) EvictionListeners

=== Other items

==== Integrate 107 TCK

Created issue #21

==== What's with the sizeof modules ?

 . *Hibernate* to be integrated within the h2lc module there
 . *Groovy*, either:
 .. @candrews takes ownership, or
 .. we find someone within TC/SAG to do so (unidentified yet though)
