= Git usage

:toc:

== Fork on me GitHub!

 . If you don't have an account on GitHub, create one now and fork your own copy of Ehcache to your account;
 . +git clone+ that fork to your computer, by default that remote's name will be +origin+;
 . +git remote add ehcache \git@github.com:ehcache/ehcache3.git+;
 . You'll have to keep your +master+ branch in sync (both on your computer and the one on your GitHub account) with the one from +ehcache+ (see §2.1 below)
 . +git checkout -b issue-'<id>'+, where '<id>' of +issue-'<id>'+ is the number of the issue you will work on (command that both creates the branch and switches to it). Commit as you see fit on each of these branches (we recommend small commits often;
 . You can have as many parallel branches as issues you might be working on;
 . Once done, you may want to re-organize you commits by doing a +git rebase -i HEAD~'<n>'+ where '<n>' is how many commits you'd be ahead when done;

== Initiate a pull request

 . Right before sharing your changes, make sure your +issue-'<id>'+ branch is based of +ehcache/master+'s current +HEAD+, e.g.:

  git pull ehcache
  git checkout master
  git rebase ehcache/master
  git checkout issue-<id>
  git rebase master

 . Finally, +git push origin issue-'<id>'+ to push your branch to your account;
 . You then need to create a pull request, using the UI on GitHub;
 . Someone from our team is then going to review it.

== Have it reviewed

 . The pull request will be reviewed for:
 .. 'Correctness': the pull request should wholly and only be about the related issue;
 .. 'Style': which needs to match the style of the project;
 .. 'Testing': all changes need to have appropriate test coverage, without breaking existing tests.
 . There could be some back and forth between you and the 'reviewer' in that process. Keep in mind that during that time +ehcache/master+ may drift, you'd then need to follow §2.1 above, but finally +git push --force origin issue-'<id>'+ to keep the pull request updated.

== Merging a pull request

If you are a reviewer (i.e. have commit rights to the ehcache/ehcache3 repo), *don't use the github UI to merge*, instead:

 . +git remote add '<contributor>'+ the contributor's ehcache3 repository;
 . +git pull '<contributor>'/issue-'<id>'+;
 . 'do the actual review';
 . +git cherry-pick+ or +git rebase issue-'<id>'+ onto +master+ with the changes;
 . +git push ehcache master+ to the main repository.

That way we keep a linear timeline (where commits have a single parent, à la subversion).
